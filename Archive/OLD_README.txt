Welcome to UploadToMegaV4!
Created by: Disk546
Ported to Linux and MacOS by: rouben
###############################
Description: This script will leverage mega's MEGAcmd tool to log into a mega account, upload a file or folder, and then produce a base64 encoded link.
Last Modified: 4/18/20
###############################
How to use:
First you need to download and install MEGAcmd. It is basically a set of .bat files that connect to mega.nz and run certain commands. For instance, mega-login.bat will log you into your mega account. Just run the installer from mega and install as directed, no need to change anything. Once that is installed, open the script in notepad and add in your email and password and save it. After that all you need to do is run the script and provide the file path, including the file extension if you are uploading a single file. As the upload progresses it will rerun the mega-transfers.bat script which displays the current files being uploaded. After the upload is complete the script will grab the public link from Mega and encode it using base64. It then puts it in a notepad file along with the file path and opens the text file. As a bonus the clipboard is set to the encoded link. This way you end up with a encoded link that you can paste directly into your posts. Oh and the reason there's no UploadToMegaV1 is because V1 was a prototype and got completely rewritten.
###############################
How it works:
This is going to get a bit technical so bear with me. The script first uses get-process to see if MEGAcmd is running in the background. If it is, the script moves on. If not, it starts MEGAcmd. Next it checks if the user is logged in to mega. If not, it uses get-credential to securely get the user’s email and password. The next thing the script does is run mega-whoami.bat and mega-df.bat to show the user who is logged in and how much space they have available. This could be expanded to do a check against the file to be uploaded to make sure there is enough space but that's for a later update. Next it asks the user for the file path/name of the file/folder being uploaded. For some reason this is case sensitive. It seems to be something on mega's side because if the wrong case is used it spits out an unknown file path error. I somehow reworked it a little in V3 to make it a little more relaxed. After that it gets the file / folder size and displays it to the user. Next it uses the mega-put.bat script to upload the file. While the file is being uploaded the script runs mega-transfers in a do while loop that runs until all files are finished uploading. The way this works is that the mega-transfers command is put into a variable and then sent to the do while loop. When there is at least one file being uploaded the mega-transfers will return the status, however if there is nothing being uploaded it is set to null, which causes the loop to end. Following this a Split-path is used to get just the file/folder name that was uploaded. Since the script uploads thing to the root of the mega drive all we need is the file/folder name to find it on the Mega drive. Next the mega-export.bat script is used to find the file/folder that was just found and create a link to it. It uses an -a and a -f to accept the copyright agreement and to export the link. Next the link is encoded to base64. It uses utf8 which is the default over at https://www.base64decode.org which is the site that I and a lot of other uploaders give to people who want to download a post. Following this a variable with the file path two pipes, the encoded link, two more pipes, and the total upload size is created. The script takes this and put it’s into a notepad file, which is then opened. This file is created in the user’s My Documents folder. Each time something is uploaded the new link is added to this file so you can keep track of your links. Finally, the clipboard is set to the encoded link and the script asks for a user input before PowerShell closes. I did this last step so that if there are any errors or a user wants to read the output, they don't have to worry about PowerShell auto closing. Here's the link to the documentation if you want it https://github.com/meganz/MEGAcmd
###############################
Known Issues
If your drive is out of space, or close to it the upload will start but when you run out the script will get stuck in an infinite loop.
Sometimes the loop that shows the progress won't end and just loop forever. The file will be uploaded but the script won't produce an encoded link or the text file.
